module pacDot ( 
					input  clk,
					input	 reset,
					input  [9:0] pacX, pacY,
					input  [4:0] dotX, dotY,
					output stillHere,
               );
    
	 
	 enum logic [1:0] { EATEN, UNEATEN } state, next_state;
	 
	logic atIntersection;
	assign atIntersection = ~(pacX[0] | pacX[1] | pacX[2] | pacX[3] | pacX[4] | pacY[0] | pacY[1] | pacY[2] | pacY[3] | pacY[4]);
	
	always_ff @ (posedge clk, posedge reset) begin
		if (reset == 1'b1) begin
			state <= UNEATEN;
		end else begin
			state <= next_state;
		end
	end
	
	always_comb begin
		next_state = state;
		
		case (state)
		UNEATEN : begin
			if(dotX == pacX[9:5] && dotY == pacY[9:5] && atIntersection)
				next_state = EATEN;
			else 
				next_state = state;
		end
		EATEN : begin
			next_state = state;
		end		
		endcase
		
	end
	
	always_comb begin
		stillHere = 1'b1;
		case (state)
			EATEN: begin
				stillHere = 1'b0;
			end
			UNEATEN : begin
				stillHere = 1'b1;
			end
		endcase
	end
	
	

endmodule
